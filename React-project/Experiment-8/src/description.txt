Component Breakdown: Library Management System

This experiment involves building a dynamic and interactive Library Management UI using React. The application demonstrates core React concepts, including state management, event handling, conditional rendering, and component reusability.

The UI allows users to:

Search for books by title or author.

Add new books dynamically.

Remove books from the list instantly without reloading the page.

The experiment consists of two main components:

App.jsx â€“ The main parent component that manages the state, search, add, and remove functionalities.

BookList.jsx â€“ A reusable child component that renders a list of books and provides a remove button for each book.

1. SECTION: Main Application (App.jsx)
Requirement

Build a React component that acts as the data source and controller for the entire library application.
It should:

Maintain the list of books using React state (useState).

Manage the search filter, form input fields, and book deletion logic.

Pass relevant data and functions as props to the BookList child component.

Implementation Details
State Variables

books â€“ An array of objects where each object represents a book with:

id â†’ Unique identifier (generated using Date.now()).

title â†’ Book title.

author â†’ Author name.

searchTerm â€“ A string that stores the current value of the search input.

newBook â€“ An object holding the form inputs for adding a new book:

title â†’ Title input value.

author â†’ Author input value.

Core Functions

Search Handling (handleSearch)

Updates searchTerm dynamically as the user types.

Filters the books array to display only those books where either:

The title includes the search term.

The author includes the search term.

Case-insensitive filtering is achieved using .toLowerCase().

Adding a Book (addBook)

Triggered when the form is submitted.

Validates that both the title and author fields are filled.

Creates a new book object and appends it to the books array using the spread operator (...books).

Resets the form inputs after successful addition.

Removing a Book (removeBook)

Triggered when the "Remove" button for a book is clicked.

Filters out the selected book from the books array using filter().

Updates the books state, instantly removing the book from the UI.

VALID BEHAVIOR

Typing a search term dynamically filters the displayed list of books in real-time.

Adding a new book immediately updates the list without reloading the page.

Clicking "Remove" deletes the book instantly from the list.

INVALID BEHAVIOR

Submitting an empty form triggers an alert instead of adding a blank entry.

Searching for a non-existent title or author results in the message "No books found".

2. SECTION: BookList Component (BookList.jsx)
Requirement

Create a reusable child component to display the list of books and allow users to remove books.

Implementation Details

Props Passed from Parent:

books â†’ The current (possibly filtered) list of books.

removeBook â†’ The function to handle book removal.

Each book is rendered as:

A <li> element displaying:

The book title in bold.

The author's name.

A "Remove" button.

If there are no books to display, a message "No books found" is rendered instead.

3. CSS Styling Breakdown
ELEMENT: Global Styles

body

Light grey background (#f8f9fa) to make content stand out.

Clean, modern sans-serif font for readability.

ELEMENT: App Container (.app-container)

max-width: 600px â†’ Ensures the app remains compact and centered.

box-shadow and border-radius â†’ Creates a "card-like" effect.

background-color: White (#fff) â†’ Provides a neutral area for the content.

ELEMENT: Search Box (.search-box)

Full width input with padding for a clean, user-friendly search bar.

Dynamically updates the displayed book list as the user types.

ELEMENT: Add Book Form (.add-form)

Flexbox layout for side-by-side alignment of inputs and button.

Gap between form fields for better spacing.

Button hover effect for improved interactivity.

ELEMENT: Book List (.book-list and .book-item)

.book-list

No default list styling.

Clean, minimal spacing for readability.

.book-item

Flex layout for title, author, and remove button in one line.

"Remove" Button

Red background (#dc3545) to indicate a destructive action.

Hover state for visual feedback.

4. JavaScript/JSX Logic Breakdown
State & Props Management

App.jsx holds all the data and manages user interactions.

BookList.jsx is a dumb component:

It doesnâ€™t manage its own state.

It only receives data via props and renders accordingly.

This follows one-way data flow, a core principle of React.

Conditional Rendering

If the books array is empty or filtered results are zero:

return <p className="no-books">No books found.</p>;


This provides immediate feedback to the user.

Event Handling

On Change Events:

Search bar updates searchTerm.

Form inputs update the newBook state.

On Submit Event:

The form adds a new book without page reload (e.preventDefault()).

On Click Event:

Remove button triggers the removeBook function.

5. Key Functions & Concepts
Concept	Purpose
useState Hook	Manages component state dynamically
Props	Passes data and functions from parent to child component
Conditional Rendering	Shows different UI elements based on state changes
Component Reusability	BookList can be reused wherever a book list display is needed
Event Handling	Handles user actions like typing, submitting, and clicking
6. Learning Outcomes ðŸŽ“

By completing this experiment, learners will:

Understand how to manage state in React using the useState hook.

Learn to filter and display data dynamically based on user input.

Implement conditional rendering to handle empty states gracefully.

Gain experience with props to pass data and functions between components.

Build a CRUD-like interface (Add & Delete) without requiring page reloads.

Understand how one-way data flow makes React applications predictable and easy to debug.

7. Final Expected Output
Feature	Expected Behavior
Search Books	Filters list dynamically by title or author
Add New Book	Appends new book instantly to the list
Remove Book	Deletes selected book instantly
Empty List Handling	Displays "No books found" message when list is empty

This project demonstrates how React can be used to build real-time, dynamic web interfaces with minimal code, while also reinforcing best practices like state management, props usage, and component reusability.